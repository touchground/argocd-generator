name: 'Generate ArgoCD Application'
description: 'Generates an ArgoCD application YAML file'
inputs:
  appName:
    description: 'Application name'
    required: true
  repoUrl:
    description: 'Repository URL'
    required: true
  manifestsPath:
    description: 'Path to Kubernetes manifests in the repository'
    required: true
  namespace:
    description: 'Destination namespace'
    required: true
  templatePath:
    description: 'Path to save the generated YAML file'
    required: false
    default: '.'
  env:
    description: 'Environment Name'
    required: false
    default: ''
  automated:
    description: 'Automated sync policy'
    required: false
    default: 'false'
  autoPrune:
    description: 'Auto prune policy'
    required: false
    default: 'false'
  selfHeal:
    description: 'Self heal policy'
    required: false
    default: 'false'
  envPrefix:
    description: 'Add environment prefix to add to the application name'
    required: false
    default: 'false'
  envSuffix:
        description: "The postfix for the environment variables"
        required: false
        type: string
        default: "false"

runs:
  using: 'composite'
  steps:
    - name: Set Application Name
      id: setAppName
      run: |
        # Initialize the application name
        appName=${{ inputs.appName }}

        # If envPrefix is set to true, prepend the environment name to the application name
        if [[ "${{ inputs.envPrefix }}" == "true" ]]; then
          # Check if environment name is not empty
          if [[ -n "${{ inputs.env }}" ]]; then
            appName="${{ inputs.env }}-$appName"
          else
            echo "Error: Environment name is required when envPrefix is set to true"
            exit 1
          fi
        fi

        # If envSuffix is set to true, append the environment name to the application name
        if [[ "${{ inputs.envSuffix }}" == "true" ]]; then
          # Check if environment name is not empty
          if [[ -n "${{ inputs.env }}" ]]; then
            appName="$appName.${{ inputs.env }}"
          else
            echo "Error: Environment name is required when envSuffix is set to true"
            exit 1
          fi
        fi

        # Output the application name
        echo "name=$appName" >> $GITHUB_OUTPUT
      shell: bash

    - name: Generate ArgoCD Application
      run: |
        template='
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        metadata:
          name: ${{ steps.setAppName.outputs.name  }}
          namespace: argocd
          finalizers:
          - resources-finalizer.argocd.argoproj.io
        spec:
          project: default
          source:
            repoURL: {{ .Values.spec.source.repoURL }}
            targetRevision: "{{ .Values.spec.source.targetRevision }}"
            path: ${{ inputs.manifestsPath }}
          destination:
            server: {{ .Values.spec.destination.server }}
            namespace: ${{ inputs.namespace }}
          syncPolicy:'

        # Check if automated is set to true
        if [[ "${{ inputs.automated }}" == "true" ]]; then
          template+='
            automated:
              prune: ${{ inputs.autoPrune }}
              selfHeal: ${{ inputs.selfHeal }}'
        fi
        
        echo "${template}" > ${{ inputs.templatePath }}/${{ inputs.appName }}.yaml
      shell: bash
