name: 'Generate ArgoCD Application'
description: 'Generates an ArgoCD application YAML file'
inputs:
  appName:
    description: 'Application name'
    required: true
  repoUrl:
    description: 'Repository URL'
    required: true
  manifestsPath:
    description: 'Path to Kubernetes manifests in the repository'
    required: true
  namespace:
    description: 'Destination namespace'
    required: true
  syncPolicy:
    description: 'Sync policy'
    required: false
    default: 'automated'
  templatePath:
    description: 'Path to save the generated YAML file'
    required: false
    default: '.'
  env:
    description: 'Environment Name'
    required: false
    default: ''
  automated:
    description: 'Automated sync policy'
    required: false
    default: 'false'
  autoPrune:
    description: 'Auto prune policy'
    required: false
    default: 'false'
  selfHeal:
    description: 'Self heal policy'
    required: false
    default: 'false'
  envPrefix:
    description: 'Add environment prefix to add to the application name'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Set Application Name
      id: setAppName
      run: |
        # Initialize the application name
        appName=""

        # If envPrefix is set to true, prepend the environment name to the application name
        if [[ "${{ inputs.envPrefix }}" == "true" ]]; then
          # Check if environment name is not empty
          if [[ -n "${{ inputs.env }}" ]]; then
            appName="${{ inputs.env }}-"
          else
            echo "Error: Environment name is required when envPrefix is set to true"
            exit 1
          fi
        fi

        # Append the application name
        appName+="${{ inputs.appName }}"

        # Output the application name
        echo "name=$appName" >> $GITHUB_OUTPUT
      shell: bash

    - name: Generate ArgoCD Application
      run: |
        # Read the template into a variable
        read -r -d '' template << EOM
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        metadata:
          name: ${{ steps.setAppName.outputs.name }}
          namespace: argocd
          finalizers:
          - resources-finalizer.argocd.argoproj.io
        spec:
          project: default
          source:
            repoURL: {{ .Values.spec.source.repoURL }}
            targetRevision: {{ .Values.spec.source.targetRevision }}
            path: ${{ inputs.manifestsPath }}
          destination:
            server: {{ .Values.spec.destination.server }}
            namespace: ${{ inputs.namespace }}
          syncPolicy:
        EOM

        # Check if automated is set to true
        if [[ "${{ inputs.automated }}" == "true" ]]; then
          template+="\n    automated: {}"
        else
          template+="\n    automated: \n      prune: \${{ inputs.autoPrune }}\n      selfHeal: \${{ inputs.selfHeal }}"
        fi

        template+="\n"

        # Define the output file path
        output_file="${{ inputs.templatePath }}/${{ inputs.appName }}.yaml"

        # Print the template to the output file
        printf "%s" "${template}" > "${output_file}"

        # Check if the file was successfully created
        if [[ ! -f "${output_file}" ]]; then
          echo "Error: Failed to create the file ${output_file}"
          exit 1
        fi
      shell: bash